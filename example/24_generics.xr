/*
** 24_generics.xr
** 泛型示例
** 演示Xray的泛型功能（基础版）
**
** 注意：完整的泛型语法解析将在后续版本实现
** 本示例展示泛型的概念和设计
*/

print("========== 泛型示例 ==========")
print("")

// ===== 1. 泛型函数概念 =====
print("--- 1. 泛型函数概念 ---")

// 泛型identity函数（概念演示）
// function identity<T>(x: T): T {
//     return x
// }

// 使用示例：
// let num = identity<int>(42)       // T = int
// let str = identity<string>("hello") // T = string

print("泛型函数：function identity<T>(x: T): T")
print("  - T是类型参数，可以是任意类型")
print("  - 参数x的类型是T")
print("  - 返回类型也是T")
print("")

print("调用示例：")
print("  identity<int>(42) → 42 (类型：int)")
print("  identity<string>(\"hello\") → \"hello\" (类型：string)")
print("")

// ===== 2. 单类型参数泛型 =====
print("--- 2. 单类型参数泛型 ---")

// function first<T>(arr: T[]): T {
//     return arr[0]
// }

// let numbers = [1, 2, 3]
// let names = ["Alice", "Bob"]

// let firstNum = first<int>(numbers)     // T = int
// let firstName = first<string>(names)   // T = string

print("泛型数组函数：first<T>(arr: T[]): T")
print("  - 参数是T类型的数组")
print("  - 返回第一个元素（类型T）")
print("")

print("实例化示例：")
print("  first<int>([1,2,3]) → 1 (类型：int)")
print("  first<string>([\"A\",\"B\"]) → \"A\" (类型：string)")
print("")

// ===== 3. 多类型参数泛型 =====
print("--- 3. 多类型参数泛型 ---")

// function pair<T, U>(first: T, second: U) {
//     return { first: first, second: second }
// }

// let p1 = pair<int, string>(1, "one")
// let p2 = pair<string, bool>("active", true)

print("多泛型参数：pair<T, U>(first: T, second: U)")
print("  - T和U是两个独立的类型参数")
print("  - 可以是相同或不同类型")
print("")

print("实例化示例：")
print("  pair<int, string>(1, \"one\") → {1, \"one\"}")
print("  pair<string, bool>(\"active\", true) → {\"active\", true}")
print("")

// ===== 4. 泛型类型约束（预览） =====
print("--- 4. 泛型类型约束（未来功能） ---")

// 带约束的泛型（第12阶段实现）
// function printable<T extends Printable>(x: T) {
//     x.print()
// }

print("泛型约束（v0.12.0）：")
print("  function printable<T extends Printable>(x: T)")
print("  - T必须实现Printable接口")
print("  - 编译时类型检查")
print("")

// ===== 5. 泛型实例化过程 =====
print("--- 5. 泛型实例化过程 ---")

print("泛型实例化步骤：")
print("1. 解析泛型声明（function identity<T>）")
print("2. 解析类型参数（T）")
print("3. 泛型调用时指定类型（identity<int>）")
print("4. 创建类型参数映射（T → int）")
print("5. 类型替换（T替换为int）")
print("6. 执行实例化后的函数")
print("")

// ===== 6. 泛型的优势 =====
print("--- 6. 泛型的优势 ---")

print("✅ 代码复用：")
print("  - 一个泛型函数适用多种类型")
print("  - 避免为每种类型写重复代码")
print("")

print("✅ 类型安全：")
print("  - 编译时类型检查")
print("  - 避免类型转换错误")
print("")

print("✅ 性能优化：")
print("  - LLVM后端可以特化优化")
print("  - 避免运行时类型检查开销")
print("")

print("========== 泛型示例结束 ==========")

/*
** 泛型实现状态（v0.7.0）：
** 
** ✅ 已实现：
** - 类型参数（TYPE_PARAM）
** - 类型参数映射（TypeParamMap）
** - 类型替换（xr_type_substitute）
** 
** ⏳ 待实现（后续版本）：
** - 泛型语法解析（<T>）
** - 泛型函数调用
** - 类型参数推导（自动推断T的类型）
** - 泛型约束（extends）
** - 泛型类（第12阶段）
** 
** 📊 当前状态：
** - 核心泛型基础设施已完成
** - 可以手动创建和实例化泛型类型
** - 为后续语法解析做好准备
*/

